\chapter{Εφαρμογή Προγράμματος και Αλγορίθμων Σε Πραγματικά Δεδομένα - Συμπεράσματα} % Main chapter title

\label{Εφαρμογή Σε Πραγματικά Δεδομένα - Συμπεράσματα} % Change X to a consecutive number; for referencing this chapter elsewhere, use \ref{ChapterX}

\lhead{Κεφάλαιο 6. \emph{Εφαρμογή Σε Πραγματικά Δεδομένα - Συμπεράσματα}} % Change X to a consecutive number; this is for the header on each page - perhaps a shortened title

\section{Εφαρμογή Σε Πραγματικά Δεδομένα}

\noindent Προκείμενου να αποδειχθεί πως χρησιμοποιώντας την κοινωνική πληροφορία μπορούν
να εξαχθούν συμπεράσματα για τις προτιμήσεις και την συμπεριφορά των χρηστών, δοκιμάσαμε το πρόγραμμά μας 
με δύο γνωστά DataSet. Η έρευνα είναι επιτυχής αν μέσω της μεθόδου αξιολόγησης που υλοποιήθηκε 
η μετρική \emph{Total clustering scheme compactness} είναι μεγαλύτερη από την \emph{Compactness of all centroids},
πράγμα που σημαίνει πως όντος τα μέλη μιας κοινότητας παρουσιάζουν ομοιότητες ενώ τα μέλη διαφορετικών κοινοτήτων ανομοιότητες.

$ Clusterer  Quality = \frac{Internal Simmilarity}{External Simmilarity}  $

Ο κάθε αλγόριθμος έχει άλλη προσέγγιση στον τρόπο που εντοπίζει κοινότητες 
επομένως δεν έχει νόημα η σύγκρισή τους μόνο με βάση την μετρική
\textbf{clusterer quality}.
Πρέπει να 
είναι γνωστό ένα σύνολο γενικών χαρακτηριστικών που θα αναδείξουν την συμπεριφορά του
κάθε ενός
και θα μας επιτρέψουν να επιλέξουμε τον κατάλληλο για κάθε περίπτωση χρήσης.

\clearpage

\subsection{Χαρακτηριστικά των Αλγορίθμων:} 


\begin{description}
\item \textbf{WeakComponent}  \hfill \\
Είναι στοχευμένος να εντοπίζει \emph{κλίκες}. Δηλαδή ομάδες στις οποίες όλοι οι χρήστες 
ενώνονται με όλους και αυτό τον καθιστά κατάλληλο για περιπτώσεις που είναι 
επιθυμητές κοινότητες με πυκνές συνδέσεις στο εσωτερικό.
Ομαδοποιεί μόνο όσους εμφανίζουν κλίκα και για αυτό 
μεγάλο μέρος τον χρηστών τελικά δεν ομαδοποιείται.
Λόγο της φύσης του οι κοινότητες που εντοπίζει είναι σχετικά μικρού μεγέθους 
αλλά εκτελεί την διαδικασία σε αρκετά σύντομο χρόνο διάστημα.
\item \textbf{BronKerbosch}  \hfill \\
Επίσης στοχευμένος να εντοπίζει κλίκες επομένως κοινότητες με πυκνές συνδέσεις. 
Κατάλληλος για την περίπτωσή μας αφού είναι σχεδιασμένος να εφαρμόζεται σε 
μη κατευθυνόμενους γράφους (undirected graphs) και να εντοπίζει \emph{μέγιστες κλίκες}. 
Μεγίστη κλίκα είναι ένα σύνολο χρηστών στο οποίο όλοι έχουν σύνδεση μεταξύ τους 
και δεν μπορεί να προστεθεί άλλος κόμβος στην ομάδα και να διατηρηθεί αυτή η εσωτερική 
\emph{πλήρης} συνδεσιμότητα.
To βασικό χαρακτηριστικό που τον διαφοροποιεί και τον καθιστά ευρέως 
χρησιμοποιούμενο είναι η δυνατότητά του να εντοπίζει επικαλυπτόμενες κοινότητες 
\setlanguage{english}(overlapping communities). \setlanguage{greek}Ο κάθε χρήστης μπορεί να ανήκει σε περισσότερες από 
μία κοινότητες και επομένως \emph{όλοι} οι χρήστες του γράφου ομαδοποιούνται. 
\item \textbf{EdgeBetweenness}  \hfill \\
Ιδανικός για Συστήματα Συστάσεων αφού εντοπίζει τους κεντρικούς διαύλους πληροφορίας στον γράφο.
Επίσης κατάλληλος για \setlanguage{english}Social Recommender Systems\setlanguage{greek} αφού έχει κατασκευαστεί σαν εργαλείο 
ανάλυσης κοινωνικών δικτύων που μετρά \emph{κεντρικότητα}. 
Μια ακμή έχει υψηλό \setlanguage{english}\emph{EdgeBetweenness}\setlanguage{greek} όταν βρίσκεται στα \emph{συντομότερα μονοπάτια
(Shortest Paths)} πολλών χρηστών. Αυτό την κάνει να είναι πιο "κεντρική" και επομένως
αγωγός επιρροής. Απαιτείται βέβαια χρόνος και επεξεργαστική ισχύς για τον εντοπισμό των 
shortest paths.\\

\emph{EdgeBetwenness thresshold: }Μεταβλητή που δίνεται ως παράμετρος και αντιπροσωπεύει τον αριθμό
των ακμών που θα αφαιρεθούν σταδιακά από τον γράφο. Όσες περισσότερες ακμές αφαιρούνται, τόσο μικρότερα και 
πιο πυκνά τα clusters που θα προκύψουν.

\item \textbf{Metis}  \hfill \\
Πακέτο αλγορίθμων για  την κατάτμηση γράφων οι οποίοι λειτουργούν 
κάνοντας \emph{Multilevel partitioning}. Αυτό σημαίνει πως αρχικά το μέγεθος του γράφου 
μειώνεται \emph{συμπιέζοντας (coarsening)} τους συνδεδεμένους κόμβους και ακμές. 
Στην συνέχεια ο μικρότερος πλέον γράφος κατατμείται και στην συνέχεια επαναφέρεται στο 
κανονικό του μέγεθος. Κρίθηκε κατάλληλος για την περίπτωση των κοινωνικών δικτύων 
γιατί όταν ο γράφος βρίσκεται στην πιο συμπυκνωμένη του φάση (στην οποία και κατατμείται)
έχουν συγχωνευτεί οι συνδεδεμένοι κόμβοι και επομένως αποκαλύπτονται οι διαφορετικές 
(μη συνδεδεμένες) κοινότητες.\\
Περιλαμβάνονται δύο βασικές λειτουργίες: \\
\emph{multilevel k-way partitioning (Ptype.kway)} και\\ 
\emph{multilevel recursive bisectioning (Ptype.rb)}\\
και στις δύο περιπτώσεις θα παραχθούν κοινότητες ίσου μεγέθους το πλήθος των οποίων 
δίνεται από τον χρήστη.\\
Στην περίπτωση του k-way ο γράφος χωρίζεται σε \emph{k} ίσα μέρη ενώ στην περίπτωση του 
rb πραγματοποιείται αναδρομική διαδικασία κατά την οποία ο γράφος χωρίζεται κάθε φορά
στο μισό και τερματίζει όταν υπάρξει ο επιθυμητός αριθμός κατατμήσεων. \\
Αφού οι εν λόγο αλγόριθμοι εφαρμόζονται στον συμπιεσμένο γράφο που προαναφέρθηκε
η διαδικασία πραγματοποιείται πολύ πιο γρήγορα συγκριτικά με τους παραδοσιακούς 
αλγορίθμους οι οποίοι υπολογίζουν partitions κατευθείαν στον αρχικό (μεγαλύτερο) γράφο.
\cite{miettinen}
Οι αλγόριθμοι του Metis συνίστανται σε περιπτώσεις που είναι επιθυμητή η παραγωγή κοινοτήτων 
συγκεκριμένου μεγέθους αλλά και σε περιπτώσεις γράφων μεγάλου μεγέθους.\\
Το πακέτο δίνει την δυνατότητα λεπτομερειακής παραμετροποίησης 
και με την χρήση της μεθόδου αξιολόγησης μπορεί κανείς να πραγματοποιήσει fine tuning 
στην κάθε περίπτωση χρήσης και δεδομένων.
\end{description} 

\clearpage

\textbf{Παράμετροι του Metis με την σειρά που πρέπει να δύνονται}:
%\setlanguage{english} 

%\begin{center}
\hspace{-10.5em}
    \begin{tabular}{ | p{1.7cm} | p{5.5cm} | p{12.0cm} |}
    \hline
    \emph{Παράμ.} & \emph{Χαρακτηριστικά} & \emph{Ερμηνεία} \\ \hline \hline
    \textbf{g} &   &  ο γράφος \\ \hline
    \textbf{N} &   &  αριθμός επιθυμητών κατατμήσεων \\ \hline
    \textbf{ptype} &    & καθορίζει τη μέθοδο που θα χρησιμοποιηθεί για τον υπολογισμό του
    k-way partitioning. \\ \hline
    \textbf{ctype} &    & καθορίζει τη μέθοδο που θα χρησιμοποιηθεί για να 
    να ταιριάξει τους κόμβους κατά το coarsening. \\ \hline
    \textbf{iptype} & έχει ισχύ μόνο όταν ptype=rb.  & καθορίζει τη μέθοδο που θα χρησιμοποιηθεί για
    τον υπολογισμό της αρχικής κατάτμησης του γράφου. \\ \hline
    \textbf{objtype} & έχει ισχύ μόνο όταν ptype=kway. & καθορίζει τον στόχο που οι partitioning
    routines θα βελτιστοποιήσουν. \\ \hline  
    \textbf{contig} & Αν ο γράφος δεν είναι είναι συνδεδεμένος η παράμετρος αγνοείται. Έχει ισχύ μόνο όταν ptype=kway. & Καθορίζει ότι οι partitioning routines
    θα προσπαθήσουν να παράξουν κατατμήσεις που είναι συνεχόμενες. \\ \hline
    \textbf{minconn} & έχει ισχύ μόνο όταν ptype=kway. & Καθορίζει ότι οι partitioning routines
    θα προσπαθήσουν να ελαχιστοποιήσουν τον μέγιστο βαθμό του subdomain γράφου, δηλ. του
    γράφου στον οποίο το κάθε partition είναι ένας κόμβος και οι ακμές συνδέουν τα subdomains 
    που έχουν  κοινό interface. \\ \hline  
    \textbf{ufactor} &  Για ptype=rb, προεπιλεγμένη τιμή = 1 (i.e., load imbalance of 1.001). Για ptype=kway, προεπιλεγμένη τιμή = 30 (i.e., load imbalance of 1.03). &  Καθορίζει το μέγηστο
    επιτρεπτό imbalance μεταξύ των κατατμήσεων. Μια τιμή x δηλώνει πως το επιτρεπτό load imbalance είναι $1+x/1000$. Για ptype=rb, το load imbalance μετριέται
    σαν την αναλογία: $2*max(left,right)/(left+right)$, όπου left και right είναι τα μεγέθη των αντίστοιχων partitions σε κάθε bisection (διχοτόμο γωνία). 
    Για ptype=kway, το load imbalance μετριέται σαν την αναλογία: 
    $max_i(pwgts[i])/avgpwgt$, όπου pwgts[i] είναι το βάρος του ith partition και avgpwgt είναι το άθροισμα του συνολικού βάρους των κόμβων, δια
    τον αριθμό τον ζητουμένων κατατμήσεων. \\ \hline
    \textbf{niter} & Προεπιλογή = 10. & Καθορίζει τις φορές που θα τρέξουν οι αλγόριθμοι σε
    κάθε στάδιο της διαδικασίας uncoarsening. \\ \hline  
    \textbf{ncuts} & Προεπιλογή = 1. &  Καθορίζει τον αριθμό των διαφορετικών κατατμήσεων 
    που θα υπολογιστούν. Το τελικό partition είναι αυτό που επιτυγχάνει το καλύτερο edgecut ή
    βαθμό επικοινωνίας.  \\ \hline
    \textbf{seed} &    & Διαλέγει τον "σπόρο" για την γεννήτρια τυχαίων αριθμών. \\ \hline
    \textbf{dbglvl} &    & Επιλέγει το dbglvl. \\ \hline
    \end{tabular}
%\end{center}

\clearpage


\subsection{Εφαρμογή Αλγορίθμων Ομαδοποίησης (Clustering)} 

\begin{center}
\noindent
\textbf{Χρησιμοποιώντας το Last.FM Dataset}\\
Πλήθος Χρηστών: \textbf{1892}  \hfill \\
Πλήθος κοινωνικών συνδέσεων:  \textbf{12717}  \hfill \\
\end{center}

\vspace{0.5cm}

%\begin{center}
\hspace{-10.0em}   
  \begin{tabular}{ | p{6cm} | p{3cm} | p{3cm} | l | l |}
    \hline
    \emph{Αλγόριθμος}				   & \emph{Edge Betweenness thresshold:5} & \emph{Edge Betweenness thresshold:2 } & \emph{WeakComponent} & \emph{BronKerbosch} \\ \hline \hline
    \textbf{run time}			 	   & 89.521 sec		     	   & 39.451 sec		     	    & 0.037 sec	     	    & 3.287 sec	   	\\ \hline  
    \textbf{number of Communities} 	           & 21			     	   & 20			     	    & 19		    & 11636		   \\ \hline
    \textbf{unclustered users} 	 	   & 1834		     	   & 1838		     	    & 1843   		    & 0		   	\\ \hline
    \textbf{max community size} 	 	   & 7			     	   & 7			     	    & 7  		    & 10	     	   \\ \hline
    \textbf{min community size} 	 	   & 2			     	   & 2			     	    & 2 	     	    & 2		   	\\ \hline
    \textbf{average community size}	 	   & 2.762 		     	   & 2.7 		     	    & 2.579 	     	    & 3.5090237	  	 \\ \hline
    \textbf{Total clustering scheme compactness}  & 0.5821527  	     	   & 0.5933855  	     	    & 0.6273950	     	    & 12.303899	   	\\ \hline
    \textbf{Compactness of all centroids} 	   & 0.037443716  	     	   & 0.035636988  	     	    & 0.0356979 	    & 0.13966095	   \\ \hline
    \textbf{clusterer quality} 		   & 15.547408	 	     	   & 16.650833	 	     	    & 17.575143  	    & 88.09834		   \\ 
    \hline
  \end{tabular}
%\end{center}

\vspace{1cm}

$\surd$ \noindent
Όλοι οι αλγόριθμοι παρουσιάζουν καλά αποτελέσματα σύμφωνα με την μετρική \emph{clusterer quality}
η οποία εκφράζει πως οι ομάδες χρηστών που εντοπίστηκαν παρουσιάζουν ομοιότητες περιεχομένου στο εσωτερικό
τους και ανομοιότητες σε σχέση με τις άλλες κοινότητες.
Επομένως αποδεικνύεται πως: \emph{μην έχοντας καμία πληροφορία για τις προτιμήσεις των χρηστών  
μπορούν να εντοπιστούν ομάδες χρηστών με παρόμοιες προτιμήσεις.} 

$\surd$ \noindent
Τα αποτελέσματα του BronKerbosch είναι ενισχυμένα καθώς εντοπίζει επικαλυπτόμενες κοινότητες όπου 
ο κάθε χρήστης ανήκει σε πάνω από μια ομάδες. Με αυτόν τον τρόπο παράγεται μεγάλος αριθμός
 ομάδων στενά συνδεδεμένων μελών.

$\surd$ \noindent
Στενά συνδεδεμένους χρήστες (κλίκες) επίσης εντοπίζουν οι \setlanguage{english}EdgeBetweenness και WeakComponent 
\setlanguage{greek}οι οποίοι σχηματίζουν σχετικά μικρές ομάδες (2,5-3 κόμβοι). Με το χαρακτηριστικό όμως πως 
οι χρήστες του γράφου που δεν ανήκουν σε κλίκα αγνοούνται και μένουν εκτός κοινοτήτων 
(unclustered users).

$\surd$ \noindent
Από το \emph{run time} είναι εμφανές πως ο \emph{WeakComponent} είναι ο αλγόριθμος 
που ολοκληρώνει πιο γρήγορα την διαδικασία. Ο χρόνος του \setlanguage{english}EdgeBetweenness 
\setlanguage{greek}είναι αυξημένος 
αφού χρειάζεται χρόνος για τον εντοπισμό των shortest paths. 

\vspace{11mm}

\begin{center}
\noindent
\textbf{Χρησιμοποιώντας το Flixster Dataset} \\
Πλήθος Χρηστών: \textbf{785926}  \hfill \\
Πλήθος κοινωνικών συνδέσεων: \textbf{5861294}  \hfill \\
\end{center}

\begin{center}
%\hspace{-2.0em}
  \begin{tabular}{ | p{5cm} | p{4cm} | }
    \hline
    \emph{Αλγόριθμος}				   & \emph{WeakComponent}  \\ \hline \hline
    \textbf{run time}			 	  & 17.27 sec    	    \\ \hline  
    \textbf{number of Communities} 	          & 69		\\ \hline
    \textbf{unclustered users} 	 	   & 785754 	      \\ \hline
    \textbf{max community size} 	 	  & 4 		   \\ \hline
    \textbf{min community size} 	 	      & 2 	       \\ \hline
    \textbf{average community size}	 	    & 2.4927535    \\ \hline
    \textbf{Total clustering scheme compactness}   & 0.20660953	 \\ \hline
    \textbf{Compactness of all centroids} 	     & 0.007924251	  \\ \hline
    \textbf{clusterer quality} 		    & 26.073067 	   \\ 
    \hline 
  \end{tabular}
\end{center}


\iffalse

%\begin{center}
\hspace{-5.0em}
  \begin{tabular}{ | p{3cm} | l | l | l | l |}
    \hline
    \emph{Αλγόριθμος}				   & \emph{Edge Betweenness th:5} & \emph{WeakComponent} & \emph{BronKerbosch} & \emph{Metis} \\ \hline \hline
    \textbf{run time}			 	   & sec 	     	     & 17270 sec    	     & sec		   & 108963 sec   \\ \hline  
    \textbf{number of Communities} 	           & 			     & 69		     & 			   & 9000 	   \\ \hline
    \textbf{unclustered users} 	 	   & 			     & 785754 	     	     & 			   & 0 		   \\ \hline
    \textbf{max community size} 	 	   & 			     & 4 		     & 	     		   & 89 	   \\ \hline
    \textbf{min community size} 	 	   & 			     & 2 	     	     & 			   & 0		   \\ \hline
    \textbf{average community size}	 	   &  			     & 2.4927535 	     & 	   		   & 87.32511 	   \\ \hline
    \textbf{Total clustering scheme compactness}  &   	    		     & 0.20660953	     & 			   & 0.026727572   \\ \hline
    \textbf{Compactness of all centroids} 	   &   	  		     & 0.007924251	     & 			   & 0.12443053    \\ \hline
    \textbf{clusterer quality} 		   &  	    		     & 26.073067 	     & 			   & 0.21479915    \\ 
    \hline 
  \end{tabular}
%\end{center}

\vspace{1cm}

\noindent
\textbf{EdgeBetweness thresshold: }   ti einai 

\fi


\vspace{0.5cm}

\noindent
$\surd$ Για δοκιμή του clustering στο \emph{flixster dataset} χρησιμοποιήθηκε ο 
αλγόριθμος WeakComponent ο οποίος μπορεί να παράγει αποτελέσματα σε καλό χρόνο 
σε σχέση με τους EdgeBetweenness και BronKerbosch οι οποίοι σε περιπτώσεις τέτοιας 
πολυπλοκότητας (λόγο μεγέθους) χρειάζονται πολύ χρόνο για την ανάλυση του γράφου και
την επεξεργασία των δεδομένων.


\noindent
$\surd$ Ο αλγόριθμος WeakComponent εντοπίζει κοινότητες με ομοιότητες περιεχομένου αλλά 
πολύ λίγες σε σχέσει με τον αριθμό των χρηστών. Οι περισσότεροι χρήστες μένουν εκτός 
ομάδας. Επομένως για την εξόρυξη πληροφορίας από γράφους τέτοιου μεγέθους θα χρειαστεί 
κάποιας μορφής προ επεξεργασία των δεδομένων πιθανός με χρήση αλγορίθμων partitioning
οι οποίοι θα μειώσουν την πολυπλοκότητα.

\vspace{3cm}

\clearpage

\subsection{Εφαρμογή Αλγορίθμων Κατάτμησης (Partitioning): Metis}

\vspace{1cm}

%\begin{center}
\hspace{-6.0em}   
  \begin{tabular}{ | p{4cm} | p{2.5cm} | p{2.5cm} | p{2.5cm} | p{2.5cm} |}
    \hline
    \emph{Αλγόριθμος}				   & \emph{Metis1} 	     & \emph{Metis2}	     & \emph{Metis3} 	   & \emph{Metis4}\\ \hline \hline
    \textbf{run time}			 	   & 0.221 sec 	     	     & 0.282 sec	     & 0.288 sec	   & 108.963 sec 	   \\ \hline  
    \textbf{number of Communities} 	           & 50			     & 22		     & 22		   & 9000	 	   \\ \hline
    \textbf{unclustered users} 	 	   & 0		     	     & 0   		     & 0		   & 0 		   \\ \hline
    \textbf{max community size} 	 	   & 38			     & 88  		     & 87	     	   & 89 	   \\ \hline
    \textbf{min community size} 	 	   & 35			     & 83 	     	     & 85		   & 0		   \\ \hline
    \textbf{average community size}	 	   & 37.84  		     & 86 	     	     & 86	   	   & 87.32511 	   \\ \hline
    \textbf{Total clustering scheme compactness}  & 0.26465952 	     & 0.26450196	     & 0.26567402	   & 0.026727572     \\ \hline
    \textbf{Compactness of all centroids} 	   & 0.1481018  	     & 0.18055633 	     & 0.20126359	   & 0.12443053     \\ \hline
    \textbf{clusterer quality} 		   & 1.7870108	 	     & 1.4649277  	     & 1.3200302	   & 0.21479915     \\ 
    \hline
  \end{tabular}
%\end{center}

\vspace{2cm}
\noindent
\textbf{Metis1: [Last FM]}\\ (g, 50, Gpmetis.Ptype.kway, Gpmetis.Ctype.shem, Gpmetis.Iptype.random, Gpmetis.Objtype.cut, false, false, 30, 10, 1, new Random(5)) \\
\textbf{Metis2: [Last FM]}\\ (g, 22, Gpmetis.Ptype.kway, Gpmetis.Ctype.shem, Gpmetis.Iptype.random, Gpmetis.Objtype.cut, false, false, 30, 10, 1, new Random(5)) \\  
\textbf{Metis3: [Last FM]}\\ (g, 22, Gpmetis.Ptype.rb, Gpmetis.Ctype.rm, Gpmetis.Iptype.grow, Gpmetis.Objtype.cut, false, false, 1, 10, 1, new Random(5))   \\
\textbf{Metis4: [flixster]}\\ (g, 9000, Gpmetis.Ptype.kway, Gpmetis.Ctype.shem, Gpmetis.Iptype.random, Gpmetis.Objtype.cut, false, false, 30, 10, 1, new Random(5)) 

\vspace{1cm}
\noindent
$\surd$ Τα αποτελέσματα της αξιολόγηση των αλγορίθμων partitioning δεν έχει νόημα να συγκριθούν 
με αυτά των αλγορίθμων clustering αφού έχουν διαφορετική στόχευση ως προς την επίλυση
του προβλήματος.

\noindent
$\surd$ Οι κατατμήσεις του γράφου περιλαμβάνουν μεγάλο αριθμό χρηστών και επομένως μεγάλο εύρος 
προτιμήσεων, σε αντίθεση με τους clustering αλγορίθμους που εντοπίζουν κλίκες. Για αυτό το λόγο 
και η μετρική \emph{clusterer quality} φένεται να είναι χαμηλότερη στην περίπτωση του Metis.

\noindent
$\surd$ Όλες οι κοινότητες είναι ίσου μεγέθους.

\noindent
$\surd$ Ο αριθμός των κοινοτήτων καθορίζεται από τον χρήστη.

\noindent
$\surd$ Οι δύο λειτουργίες του Metis, \emph{k-way, recursive bisectioning} στην περίπτωση
του LastFM DataSet έχουν όμοια απόδοση.

\noindent
$\surd$ Και στα δύο DataSet οι αλγόριθμοι εντοπίζουν κοινότητες χρηστών με κάποιες ομοιότητες
αλλά χωρίς να παρουσιάζονται ιδιαίτερες ανομοιότητες με τα άλλα σύνολα.

\noindent
$\surd$ Ο Metis πραγματοποιεί την διαδικασία σε καλό χρόνο και στο \emph{flixster DataSet},
αναλογικά με το μέγεθός του, αφού πρόκειται για \emph{multilevel partioner}.


\clearpage

\section{Συμπεράσματα}
\noindent
Στα πλαίσια αυτής της εργασίας πραγματοποιήθηκε μελέτη σχετικά με τα Συστήματα Συστάσεων και τον συνδυασμό τους με τα Κοινωνικά Δίκτυα.
Διερευνήθηκε ο τρόπος με τον οποίο ένα τέτοιο σύστημα μπορεί να βελτιώσει την λειτουργία του, εξάγοντας γνώση από την κοινωνική διασύνδεση των χρηστών. 
Στην συνέχεια βάση αυτής της ανάλυσης αναπτύχθηκε ένα σύστημα εξαγωγής γνώσης από κοινωνικό γράφο, με τον κατάλληλο σχεδιασμό ώστε να αποτελέσει επέκταση ενός υπάρχοντος 
Recommendation System. Πρόκειται για τον PServer, ένα γενικευμένο σύστημα Προσωποποίησης το οποίο διαθέτει μηχανισμούς συστάσεων που ακολουθούν Content Based αλλά και Collaborative μεθόδους. 
Το σύστημά μας (socialPServer) πρόκειται για έναν μηχανισμό ο οποίος είναι σε θέση να χειρίζεται έναν κοινωνικό γάφο και να εφαρμόζει έναν αριθμό αλγορίθμων εντοπισμού κοινοτήτων χρηστών. 
Οι αλγόριθμοι μελετούν τις κοινωνικές συνδέσεις με διάφορους τρόπους και συμπεραίνουν "κλίκες" στενά συνδεδεμένων χρηστών. Αυτή την κοινωνική πληροφορία πρόκειται να χρησιμοποιήσει
ο PServer για να βελτιώσει την ακρίβεια των αποτελεσμάτων του.
Σε μια ρεαλιστική κοινότητα τα μέλη μοιράζονται κοινά "αντικείμενα", για παράδειγμα κοινά συγγράμματα σε 
μία ακαδημαϊκή κοινότητα ή και κοινές αισθητικές προτιμήσεις σε έναν ευρύτερο φιλικό κύκλο. Επομένως για να επιτευχθεί η προσωποποίηση θα γίνουν υποθέσεις για τις προτιμήσεις των χρηστών 
ανάλογα με το κοινωνικό τους περιβάλλον. 

Τέλος έγινε δοκιμή του προγράμματος σε πραγματικά δεδομένα με χρίση των DataSet: LastFM και Flixster. Για να αξιολογηθούν τα αποτελέσματα χρησιμοποιήθηκαν μέτρα ομοιότητας τα οποία 
υπολογίζουν κατά πόσον μοιάζουν τα προφίλ των χρηστών, δηλαδή σε ποιο βαθμό οι υπάρχουν κοινές προτιμήσεις αντικείμενων. Σε όλες τις περιπτώσεις των αλγορίθμων οι παραγόμενες κοινότητες 
εμφανίζουν ομοιότητα στα μέλη τις ίδιας κοινότητας και ανομοιότητα στα μέλη άλλων κοινοτήτων. Το γεγονός ότι μη ξέροντας τίποτα για τις προτιμήσεις μπορούν να εντοπιστούν σύνολα χρηστών
τα οποία παρουσιάζουν ομοιότητες αποδεικνύει την δύναμη των πληροφοριών που κρύβει η κοινωνική δομή και το ενδιαφέρον για την ανάλυση των κοινωνικών δικτύων συνεχώς αυξάνεται.
